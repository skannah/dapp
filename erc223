pragma solidity ^0.8.0;

contract ERC223 {
    mapping(address => uint256) private balances;

    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value, bytes memory _data) public returns (bool) {
        require(_to != address(0), "Invalid recipient");
        require(_value <= balances[msg.sender], "Insufficient balance");

        uint256 codeLength;
        assembly {
            codeLength := extcodesize(_to)
        }

        balances[msg.sender] -= _value;
        balances[_to] += _value;

        if (codeLength > 0) {
            ERC223Receiver receiver = ERC223Receiver(_to);
            receiver.tokenFallback(msg.sender, _value, _data);
        }

        emit Transfer(msg.sender, _to, _value, _data);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) {
        require(_spender != address(0), "Invalid spender");

        // To prevent potential race conditions, use a separate approval value per spender
        // Instead of the traditional allowance mapping
        uint256 approvalKey = uint256(keccak256(abi.encodePacked(msg.sender, _spender)));
        balances[approvalKey] = _value;

        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value, bytes memory _data) public returns (bool) {
        require(_to != address(0), "Invalid recipient");
        require(_value <= balances[_from], "Insufficient balance");
        require(_value <= allowed(_from, msg.sender), "Insufficient allowance");

        uint256 codeLength;
        assembly {
            codeLength := extcodesize(_to)
        }

        balances[_from] -= _value;
        balances[_to] += _value;

        if (codeLength > 0) {
            ERC223Receiver receiver = ERC223Receiver(_to);
            receiver.tokenFallback(_from, _value, _data);
        }

        allowed(_from, msg.sender) -= _value;

        emit Transfer(_from, _to, _value, _data);
        return true;
    }

    function allowed(address _owner, address _spender) public view returns (uint256) {
        uint256 approvalKey = uint256(keccak256(abi.encodePacked(_owner, _spender)));
        return balances[approvalKey];
    }
}

interface ERC223Receiver {
    function tokenFallback(address _from, uint256 _value, bytes calldata _data) external;
}
