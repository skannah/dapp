import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, timestamp, data):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.nonce = 0
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        sha = hashlib.sha256()
        sha.update(str(self.index).encode('utf-8') +
                   str(self.previous_hash).encode('utf-8') +
                   str(self.timestamp).encode('utf-8') +
                   str(self.data).encode('utf-8') +
                   str(self.nonce).encode('utf-8'))
        return sha.hexdigest()

    def mine_block(self, difficulty):
        target = '0' * difficulty
        while self.hash[:difficulty] != target:
            self.nonce += 1
            self.hash = self.calculate_hash()

    def __str__(self):
        return f'Block #{self.index} [Hash: {self.hash}]'


class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4  # Number of leading zeros required for mining

    def create_genesis_block(self):
        return Block(0, '0', time.time(), 'Genesis Block')

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.mine_block(self.difficulty)
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False

            if current_block.previous_hash != previous_block.hash:
                return False

        return True


# Usage example
blockchain = Blockchain()

block1 = Block(1, '', time.time(), 'Data 1')
blockchain.add_block(block1)

block2 = Block(2, '', time.time(), 'Data 2')
blockchain.add_block(block2)

print(f"Is blockchain valid? {blockchain.is_chain_valid()}")

# Tampering with data to invalidate the chain
blockchain.chain[1].data = 'Modified Data'
print(f"Is blockchain valid? {blockchain.is_chain_valid()}")
