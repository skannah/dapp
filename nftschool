pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract NFTSchoolGatedCollection is ERC721Enumerable, Ownable {
    uint256 public constant MAX_SUPPLY = 10000;
    uint256 public constant MAX_SUPPLY_PER_ADDRESS = 10;

    string private baseTokenURI;
    uint256 private mintedCount;
    mapping(address => uint256) private mintedPerAddress;

    event Mint(address indexed owner, uint256 indexed tokenId);

    constructor(string memory _baseTokenURI) ERC721("NFT School Gated Collection", "NSGC") {
        baseTokenURI = _baseTokenURI;
    }

    function mint() external {
        require(totalSupply() < MAX_SUPPLY, "Max supply reached");
        require(mintedPerAddress[msg.sender] < MAX_SUPPLY_PER_ADDRESS, "Max supply per address reached");

        uint256 tokenId = mintedCount;
        mintedCount++;
        mintedPerAddress[msg.sender]++;
        _safeMint(msg.sender, tokenId);

        emit Mint(msg.sender, tokenId);
    }

    function _baseURI() internal view override returns (string memory) {
        return baseTokenURI;
    }

    function setBaseTokenURI(string memory _baseTokenURI) external onlyOwner {
        baseTokenURI = _baseTokenURI;
    }

    function tokensOfOwner(address owner) external view returns (uint256[] memory) {
        uint256 tokenCount = balanceOf(owner);
        if (tokenCount == 0) {
            return new uint256[](0);
        } else {
            uint256[] memory result = new uint256[](tokenCount);
            for (uint256 i = 0; i < tokenCount; i++) {
                result[i] = tokenOfOwnerByIndex(owner, i);
            }
            return result;
        }
    }
}
